C51 COMPILER V9.54   EEPROM                                                                03/12/2022 18:23:31 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\Obj\EEPROM.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\Keil_V533\C51\BIN\C51.EXE ..\HARDWARE\EEPROM\EEPROM.c LARGE OPTIMIZE(0,
                    -SPEED) BROWSE INCDIR(..\Sys;..\User;..\Hardware\ADC;..\Hardware\EEPROM;..\Hardware\GPIO;..\Hardware\INT;..\Hardware\PCA;
                    -..\Hardware\PIT;..\Hardware\PWM;..\Hardware\UART;..\HARDWARE\TIMER;..\Peripheral\ad7124_noos;..\Peripheral;..\Hardware\S
                    -PI;..\HARDWARE\WDT) DEBUG OBJECTEXTEND PRINT(.\Listings\EEPROM.lst) TABS(2) OBJECT(..\Obj\EEPROM.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /***************  功能说明  ****************
  14          
  15          本文件为STC8系列的内置EEPROM读写程序,用户几乎可以不修改这个程序.
  16          
  17          ******************************************/
  18          
  19          #include "eeprom.h"
  20          
  21          //========================================================================
  22          // 函数: void ISP_Disable(void)
  23          // 描述: 禁止访问ISP/IAP.
  24          // 参数: non.
  25          // 返回: non.
  26          // 版本: V1.0, 2012-10-22
  27          //========================================================================
  28          void DisableIap(void)
  29          {
  30   1        IAP_CONTR = 0;    //禁止IAP操作
  31   1        IAP_CMD = 0;    //去除IAP命令
  32   1        IAP_TRIG = 0;   //防止IAP命令误触发
  33   1        IAP_ADDRH = 0xff; //清0地址高字节
  34   1        IAP_ADDRL = 0xff; //清0地址低字节，指向非EEPROM区，防止误操作
  35   1      }
  36          
  37          //========================================================================
  38          // 函数: void IapTrig(void)
  39          // 描述: 触发EEPROM操作.
  40          // 参数: none.
  41          // 返回: none.
  42          // 版本: V1.0, 2014-6-30
  43          //========================================================================
  44          void IapTrig(void)
  45          {
  46   1        F0 = EA; //保存全局中断
  47   1        EA = 0;  //禁止中断, 避免触发命令无效
  48   1        IAP_TRIG = 0x5A;
  49   1        IAP_TRIG = 0xA5; //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
  50   1                 //送完A5H后，IAP命令立即被触发启动
  51   1                 //CPU等待IAP完成后，才会继续执行程序。
  52   1        _nop_();
C51 COMPILER V9.54   EEPROM                                                                03/12/2022 18:23:31 PAGE 2   

  53   1        _nop_();
  54   1        EA = F0; //恢复全局中断
  55   1      }
  56          
  57          //========================================================================
  58          // 函数: void IapRead(u16 EE_address,u8 *DataAddress,u16 number)
  59          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  60          // 参数: EE_address:  读出EEPROM的首地址.
  61          //       DataAddress: 读出数据放缓冲的首地址.
  62          //       number:      读出的字节长度.
  63          // 返回: non.
  64          // 版本: V1.0, 2012-10-22
  65          //========================================================================
  66          void IapRead(u16 EE_address, u8 *DataAddress, u16 number)
  67          {
  68   1        u16 bytesCnt = 0;
  69   1        IAP_ENABLE(); //设置等待时间，允许IAP操作，送一次就够
  70   1        IAP_READ();   //送字节读命令，命令不需改变时，不需重新送命令
  71   1        for (bytesCnt = 0; bytesCnt < number; bytesCnt++)
  72   1        {
  73   2          IAP_ADDRH = EE_address / 256;   //送地址高字节（地址需要改变时才需重新送地址）
  74   2          IAP_ADDRL = EE_address % 256;   //送地址低字节
  75   2          IapTrig();              //触发EEPROM操作
  76   2          DataAddress[bytesCnt] = IAP_DATA; //读出的数据送往
  77   2          EE_address++;
  78   2        }
  79   1      
  80   1        DisableIap();
  81   1      }
  82          
  83          //========================================================================
  84          // 函数: void IapErase(u16 EE_address)
  85          // 描述: 把指定地址的EEPROM扇区擦除.
  86          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  87          // 返回: non.
  88          // 版本: V1.0, 2013-5-10
  89          //========================================================================
  90          void IapErase(u16 EE_address)
  91          {
  92   1        IAP_ENABLE();         //设置等待时间，允许IAP操作，送一次就够
  93   1        IAP_ERASE();          //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
  94   1                        //只有扇区擦除，没有字节擦除，512字节/扇区。
  95   1                        //扇区中任意一个字节地址都是扇区地址。
  96   1        IAP_ADDRH = EE_address / 256; //送扇区地址高字节（地址需要改变时才需重新送地址）
  97   1        IAP_ADDRL = EE_address % 256; //送扇区地址低字节
  98   1        IapTrig();            //触发EEPROM操作
  99   1        DisableIap();         //禁止EEPROM操作
 100   1      }
 101          
 102          //========================================================================
 103          // 函数: void IapWrite(u16 EE_address,u8 *DataAddress,u16 number)
 104          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
 105          // 参数: EE_address:  写入EEPROM的首地址.
 106          //       DataAddress: 写入源数据的缓冲的首地址.
 107          //       number:      写入的字节长度.
 108          // 返回: non.
 109          // 版本: V1.0, 2012-10-22
 110          //========================================================================
 111          void IapWrite(u16 EE_address, u8 *DataAddress, u16 number)
 112          {
 113   1        u16 bytesCnt = 0;
 114   1      
C51 COMPILER V9.54   EEPROM                                                                03/12/2022 18:23:31 PAGE 3   

 115   1        IAP_ENABLE(); //设置等待时间，允许IAP操作，送一次就够
 116   1        IAP_WRITE();  //宏调用, 送字节写命令
 117   1        for (bytesCnt = 0; bytesCnt < number; bytesCnt++)
 118   1        {
 119   2          IAP_ADDRH = EE_address / 256;   //送地址高字节（地址需要改变时才需重新送地址）
 120   2          IAP_ADDRL = EE_address % 256;   //送地址低字节
 121   2          IAP_DATA = DataAddress[bytesCnt]; //送数据到IAP_DATA，只有数据改变时才需重新送
 122   2          IapTrig();              //触发EEPROM操作
 123   2          EE_address++;           //下一个地址
 124   2        }                   //直到结束
 125   1        DisableIap();
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    402    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
